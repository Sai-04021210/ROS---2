#!/usr/bin/env python3

import os
import sys
import rclpy
from rclpy.node import Node
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point
import time

class LegoVisualizer(Node):
    """
    A node to visualize LEGO bricks.
    
    This node publishes visualization markers for LEGO bricks
    to help users see the bricks in RViz.
    """
    
    def __init__(self):
        super().__init__('lego_visualizer')
        
        # Create publisher for visualization markers
        self.marker_pub = self.create_publisher(
            MarkerArray,
            '/visualization_markers',
            10
        )
        
        # Define brick positions
        self.brick_positions = {
            'brick_2x4_red': [0.1, 0.1, 0.01],
            'brick_2x2_blue': [-0.1, 0.1, 0.01],
            'brick_1x2_green': [0, -0.1, 0.01]
        }
        
        # Define target positions
        self.target_positions = {
            'target_1': [0.15, -0.15, 0.01],
            'target_2': [-0.15, -0.15, 0.01]
        }
        
        # Create a timer to publish markers
        self.timer = self.create_timer(1.0, self.publish_markers)
        
        self.get_logger().info('LEGO visualizer initialized')
    
    def publish_markers(self):
        """Publish visualization markers for bricks and targets."""
        marker_array = MarkerArray()
        marker_id = 0
        
        # Brick markers
        for brick_name, position in self.brick_positions.items():
            marker = Marker()
            marker.header.frame_id = "world"
            marker.header.stamp = self.get_clock().now().to_msg()
            marker.ns = "bricks"
            marker.id = marker_id
            marker_id += 1
            marker.type = Marker.CUBE
            marker.action = Marker.ADD
            
            # Set position
            marker.pose.position.x = float(position[0])
            marker.pose.position.y = float(position[1])
            marker.pose.position.z = float(position[2])
            
            # Set orientation (identity quaternion)
            marker.pose.orientation.w = 1.0
            
            # Set scale based on brick type
            if "2x4" in brick_name:
                marker.scale.x = 0.032  # 4 * lego_unit
                marker.scale.y = 0.016  # 2 * lego_unit
                marker.scale.z = 0.0096  # lego_height
                marker.color.r = 1.0
            elif "2x2" in brick_name:
                marker.scale.x = 0.016  # 2 * lego_unit
                marker.scale.y = 0.016  # 2 * lego_unit
                marker.scale.z = 0.0096  # lego_height
                marker.color.b = 1.0
            elif "1x2" in brick_name:
                marker.scale.x = 0.016  # 2 * lego_unit
                marker.scale.y = 0.008  # 1 * lego_unit
                marker.scale.z = 0.0096  # lego_height
                marker.color.g = 1.0
            
            marker.color.a = 1.0
            marker_array.markers.append(marker)
        
        # Target markers
        for target_name, position in self.target_positions.items():
            marker = Marker()
            marker.header.frame_id = "world"
            marker.header.stamp = self.get_clock().now().to_msg()
            marker.ns = "targets"
            marker.id = marker_id
            marker_id += 1
            marker.type = Marker.CYLINDER
            marker.action = Marker.ADD
            
            # Set position
            marker.pose.position.x = float(position[0])
            marker.pose.position.y = float(position[1])
            marker.pose.position.z = float(position[2])
            
            # Set orientation (identity quaternion)
            marker.pose.orientation.w = 1.0
            
            # Set scale
            marker.scale.x = 0.05
            marker.scale.y = 0.05
            marker.scale.z = 0.001
            
            # Set color (semi-transparent yellow)
            marker.color.r = 1.0
            marker.color.g = 1.0
            marker.color.b = 0.0
            marker.color.a = 0.5
            
            marker_array.markers.append(marker)
        
        self.marker_pub.publish(marker_array)
        self.get_logger().debug('Published visualization markers')

def main(args=None):
    rclpy.init(args=args)
    
    lego_visualizer = LegoVisualizer()
    
    try:
        rclpy.spin(lego_visualizer)
    except KeyboardInterrupt:
        pass
    finally:
        lego_visualizer.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
