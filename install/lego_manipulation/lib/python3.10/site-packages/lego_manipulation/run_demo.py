#!/usr/bin/env python3

import os
import sys
import rclpy
from rclpy.node import Node
import subprocess
import signal
import time
from threading import Thread

class LegoDemo(Node):
    """
    A node to run the LEGO demo with visualization.
    
    This node launches RViz and the necessary components to visualize
    the robot and LEGO bricks.
    """
    
    def __init__(self):
        super().__init__('lego_demo')
        
        self.get_logger().info('Starting LEGO demo...')
        
        # Start a thread to launch RViz and robot state publisher
        self.rviz_thread = Thread(target=self.launch_rviz)
        self.rviz_thread.daemon = True
        self.rviz_thread.start()
        
        # Wait for RViz to start
        time.sleep(5)
        
        # Create a timer to start the demo
        self.demo_timer = self.create_timer(
            2.0,  # Start demo after 2 seconds
            self.start_demo
        )
        
        self.get_logger().info('LEGO demo initialized')
    
    def launch_rviz(self):
        """Launch RViz and robot state publisher."""
        try:
            # Get the path to the launch file
            from ament_index_python.packages import get_package_share_directory
            lego_manipulation_dir = get_package_share_directory('lego_manipulation')
            launch_file = os.path.join(lego_manipulation_dir, 'launch', 'lego_demo.launch.py')
            
            # Launch the demo
            self.get_logger().info(f'Launching RViz with: {launch_file}')
            subprocess.run(['ros2', 'launch', launch_file], 
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.PIPE)
        except Exception as e:
            self.get_logger().error(f'Error launching RViz: {e}')
    
    def start_demo(self):
        """Start the LEGO pick and place demo."""
        self.get_logger().info('Starting LEGO pick and place demo...')
        
        # Cancel the timer to avoid multiple starts
        self.demo_timer.cancel()
        
        # Here we would normally start the demo, but it's already started by the launch file
        # This is just a placeholder for any additional setup needed
        
        self.get_logger().info('Demo started. Press Ctrl+C to exit.')

def main(args=None):
    rclpy.init(args=args)
    
    lego_demo = LegoDemo()
    
    try:
        rclpy.spin(lego_demo)
    except KeyboardInterrupt:
        pass
    finally:
        # Clean up
        lego_demo.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
